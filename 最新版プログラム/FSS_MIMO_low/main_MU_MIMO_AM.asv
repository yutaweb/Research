%****************************
%縲?菴懈?占???ｼ夐□螻ｱ陬募､ｪ
%  菫ｮ豁｣譌･?ｼ?2020/12/02
%****************************

%% simuration start
clear all;
tic;
rand('state',sum(100*clock));

%% definition of parametor
Doppler=10;
com_delay=0;
ifftsize=64;
guardtype=2;
guardtime=16;
windowtype=2;% BPSK:1,QPSK:2,etc
CarrSpacing=1;
MultiNo=7;% 繝槭Ν繝√ヱ繧ｹ謨ｰ
Transrate=20*10^6;
Delay=2;%Number of delay sample
ww=1;%dB degradation 竍? dB蜉｣蛹?

NumCarr=64;
Num_sym=20;%Number of data symbols    
Num_pilot=2;%Number of pilot symbols
   
%% FEC Function Command

strength_len=0;% 諡俶據髟ｷ
if strength_len==0
   g=0;
   coding_rate=1;% 隨ｦ蜿ｷ蛹也紫?ｼ壽怏逕ｨ縺ｪ隨ｦ蜿ｷ縺ｮ蜑ｲ蜷茨ｼ亥?鈴聞謌仙?繧帝勁縺擾ｼ?
   filename= 'result_uncoded_10Hz.txt';%File to store the results in
else
   g=g12(strength_len);% generate matrix
   coding_rate=1/2;% R 竍? 蜈･蜉?1縺ｫ蟇ｾ縺励※縲∝?ｺ蜉帙′2縺､蠕励ｉ繧後ｋ縲?
   filename= 'result_coded_10Hz.txt';%File to store the results in
   filename1= 'result_uncoded_10Hz.txt';%File to store the results in
   filename2= 'result_throughput_10Hz.txt';%File to store the results in
end

%% Carriers used for a single wide OFDM channel

StartCarr=1;
FinCarr=ifftsize;% FinCarr=64
carriers=[StartCarr:CarrSpacing:FinCarr];% 0?ｽ?64縺ｾ縺ｧ縲?1縲埼俣髫斐〒carriers縺ｫ繝?繝ｼ繧ｿ縺悟?･繧? [1,64]
rep=1000;%Number of loop times 竍偵??莉ｻ諢上?ｮ蝗樊焚繝ｫ繝ｼ繝励☆繧具ｼ医す繝溘Η繝ｬ繝ｼ繧ｷ繝ｧ繝ｳ蝗樊焚?ｼ?

SNRMin=0;
SNRMax=30;
SNRInc=5;
perfect=0;%perfect channel option(1: perfect,0:non perfect)
proc_gain=8; %OFDMA縺ｫ繧医▲縺ｦ縲?4繝ｦ繝ｼ繧ｶ縺ｫ蜑ｲ繧雁ｽ薙※繧九?ｮ縺ｧ16ﾃ?16縺ｮ繝槭ヨ繝ｪ繝?繧ｯ繧ｹ
WordSizes=[2];%%BPSK?ｼ?1,QPSK?ｼ?2,16QAM?ｼ?4
NumSizes=length(WordSizes);% Numsizes=1 竍偵??陦悟?励?ｮ螟ｧ縺阪＆
Num_Tx=2;%Number of transmiter 竍? 騾∽ｿ｡繧｢繝ｳ繝?繝翫?ｮ謨ｰ 
Num_Rx=2;%Number of receiver 竍? 蜿嶺ｿ｡繧｢繝ｳ繝?繝翫?ｮ謨ｰ
Num_User=8;%Number of user 竍? 繝ｦ繝ｼ繧ｶ縺ｮ謨ｰ

% 譚｡莉ｶ繧堤ｵｱ荳?縺輔○繧九◆繧√↓蜈医↓縺吶∋縺ｦ縺ｮ繝ｩ繝ｳ繝?繝?蛟､繧堤函謌舌☆繧?
rng('default');
rng(10); % 繝ｩ繝ｳ繝?繝?縺ｮ蛟､繧貞､画峩縺励◆縺?譎ゅ?ｯ縲√％縺ｮ謨ｰ蟄励ｒ螟画峩縺吶ｋ
channel_rand=rand([Num_Tx,Num_Rx,Num_User,2,MultiNo,(SNRMax-SNRMin)/SNRInc+1,rep]); 
% [2,2,4,7,7,10] 竊? [騾∽ｿ｡繧｢繝ｳ繝?繝頑焚,蜿嶺ｿ｡繧｢繝ｳ繝?繝頑焚,繝ｦ繝ｼ繧ｶ繝ｼ謨ｰ,channel_only蜀?縺ｧ縺ｮ菴ｿ逕ｨ謨ｰ,繝√Ε繝阪Ν莨晄眺霍ｯ謨ｰ,繝槭Ν繝√ヱ繧ｹ謨ｰ,SNR蜿榊ｾｩ謨ｰ,蜈ｨ蜿榊ｾｩ謨ｰ]

headerstr='SNR (samples)';      
BERstr=[];
PhErrstr=[];

Result = zeros(floor((SNRMax-SNRMin)/SNRInc)+1,NumSizes+1);% zeros(7,2)
Result1 = zeros(floor((SNRMax-SNRMin)/SNRInc)+1,NumSizes+1);% zeros(7,2)
Result2 = zeros(floor((SNRMax-SNRMin)/SNRInc)+1,NumSizes+1);% zeros(7,2)

%% Various modulation schemes.

for l = 1:NumSizes % 1
   wordsize = WordSizes(l);% wordsize = 2
   disp(['wordsize: ' num2str(wordsize)]);% wordsize : 2縺瑚｡ｨ遉ｺ縺輔ｌ繧?
   BERstr = [BERstr ', BER b/Hz: ', int2str(wordsize)];% int2str縺ｯ謨ｴ謨ｰ繧呈枚蟄励↓螟画鋤縺吶ｋ
   PhErrstr = [PhErrstr ', Ph b/Hz: ', int2str(wordsize)];   
  
   %% Repeat various SNR situation
  
   for k = 1:((SNRMax-SNRMin)/SNRInc)+1 % 1?ｽ?7 
      SNR = (k-1)*SNRInc + SNRMin;% 0?ｽ?30 窶ｻSNRInc=3
	  disp(['   Eb/N0: ' num2str(SNR)]);% 0?ｽ?30縺ｾ縺ｧ繧定｡ｨ遉ｺ縺吶ｋ
      refData=[]; symwaves=[]; 
      
      %% Repeat each run several times
      for r = 1:rep % 1?ｽ?100 竍? 蜷?縲?縺ｮEb/No縺ｫ蟇ｾ縺励※莉ｻ諢上?ｮ蝗樊焚繧ｷ繝溘Η繝ｬ繝ｼ繧ｷ繝ｧ繝ｳ縺吶ｋ
        disp(['      Repeat ', num2str(r)]);
        %% Tx device
        if strength_len==0
           Gen_data=MIMO_data(Num_sym,wordsize,NumCarr,Num_Tx);% MIMO_data(20,2,64,2)竍? 譛?邨ら噪縺ｫ[20,64,2,2]縺ｮ0or1縺瑚ｿ斐▲縺ｦ縺上ｋ
        else
           [Gen_data,Ori_data,int_pattern]=CMIMO_data(Num_sym,wordsize,NumCarr,g,Num_Tx);% convolutional code(R=1/2,K=7)
           % Gen_data=[20,64,2,2]竊?0or1,Ori_data=[1,20*64*2-6]竊?0or1,int_pattern=[1,20*64*2*2]竊進ndex
           % FEC蜿翫?ｳ繧､繝ｳ繧ｿ繝ｪ繝ｼ繝悶ｒ謗帙¢繧矩圀縺ｯ縲｀U_MIMO縺ｮ蝣ｴ蜷医?∝?ｨ繧ｹ繝医Μ繝ｼ繝?縺ｫ蜷後§繧ゅ?ｮ繧呈寺縺代※繧医＞繧ゅ?ｮ縺ｨ諤昴ｏ繧後ｋ縲?
        end
        
        %% estimate channel
%         [channel_ranking,user_index]=main_virtual(SNR,Doppler,com_delay,ifftsize,guardtype,guardtime,...
%             MultiNo,Transrate,Delay,ww,Num_sym,NumCarr,Num_pilot,strength_len,carriers,proc_gain,...
%             WordSizes,NumSizes,k,Num_Tx,Num_Rx,Num_User,channel_rand,r);
%         disp(channel_ranking);
%         disp(user_index);
        channel_ranking=[4 6 5 3 ];
        user_index=[1 2 3 4 5 6 7 8;1 2 3 4 5 6 7 8];
         % best_adaptiveを求めるためにパターン的に判定する。
        %% transmitter
         Datatx=transmitter_non_FSS_MU_MIMO(Gen_data,Num_sym,wordsize,NumCarr,guardtype,guardtime,...
                          Num_pilot,proc_gain,Num_Tx); % transmitter([20,64,2,2],20,2,64,2,16,2,64,4) 竍? [22,64,2]縺ｮ繝?繝ｼ繧ｿ?ｼ医ヱ繧､繝ｭ繝?繝井ｿ｡蜿ｷ 蜷ｫ?ｼ?
        
        % 蜷?繧ｹ繝医Μ繝ｼ繝?縺ｫ縺翫＞縺ｦ64繧ｵ繝悶く繝｣繝ｪ繧｢繧偵Θ繝ｼ繧ｶ謨ｰ蛻?縺?縺大?蜑ｲ縺励※縲∝推繝ｦ繝ｼ繧ｶ縺ｮ繝?繝ｼ繧ｿ縺ｫ蟇ｾ縺励※諡｡謨｣隨ｦ蜿ｷ繧貞牡繧雁ｽ薙※繧?
        % [22,64,2]
        % 4繝ｦ繝ｼ繧ｶ縺ｮ蝣ｴ蜷?
        % [22,1 ?ｽ?16,2] 竍? 繝ｦ繝ｼ繧ｶ1縺ｫ蜑ｲ繧雁ｽ薙※繧?
        % [22,17?ｽ?32,2] 竍? 繝ｦ繝ｼ繧ｶ2縺ｫ蜑ｲ繧雁ｽ薙※繧?
        % [22,33?ｽ?48,2] 竍? 繝ｦ繝ｼ繧ｶ3縺ｫ蜑ｲ繧雁ｽ薙※繧?
        % [22,49?ｽ?64,2] 竍? 繝ｦ繝ｼ繧ｶ4縺ｫ蜑ｲ繧雁ｽ薙※繧?
        % 8繝ｦ繝ｼ繧ｶ縺ｮ蝣ｴ蜷医?ｯ繧ｵ繝悶く繝｣繝ｪ繧｢繧?8蛻?蜑ｲ縲?16繝ｦ繝ｼ繧ｶ縺ｮ蝣ｴ蜷医?ｯ繧ｵ繝悶く繝｣繝ｪ繧｢繧?16蛻?蜑ｲ縺吶ｋ縲?
        % 窶ｻ縺薙％縺ｧ縲∵ｳｨ諢上＠縺ｪ縺代ｌ縺ｰ縺ｪ繧峨↑縺?縺ｮ縺ｯ縲！EEE縺ｮ隕乗?ｼ縺ｧ縺ｯ縲√し繝悶く繝｣繝ｪ繧｢髢薙↓繝後Ν繧定ｨｭ縺代ｋ蠢?隕√′縺ゅｋ縺ｮ縺ｧ縲∝ｮ滄圀縺ｫ菴ｿ縺医ｋ縺ｮ縺ｯ64繧ｵ繝悶く繝｣繝ｪ繧｢縺ｮ蝣ｴ蜷医?ｯ縲?52蛟?
        % 諡｡謨｣謌仙?繧?3谺｡蜈?譁ｹ蜷代↓雜ｳ縺怜粋繧上○縺ｦ縺?繧九?ｮ縺ｧ縲∝ｾ捺擂縺ｨ逡ｰ縺ｪ縺｣縺滓ｱゅａ譁ｹ縺ｫ縺ｪ縺｣縺ｦ縺?繧九％縺ｨ縺ｫ豕ｨ諢上☆繧九??
        %%  Make a timewave using IFFT and normalization
        % 蜈ｨ繧ｵ繝悶く繝｣繝ｪ繧｢縺ｫ荳?豌励↓IFFT繧呈寺縺代ｋ蝣ｴ蜷? M
        BaseSignal=zeros(NumCarr,Num_sym+Num_pilot,Num_Tx); % [64,22,2]
        for i=1:Num_Tx % 1?ｽ?2
            BaseSignal(:,:,i)=(ifft(Datatx(:,:,i)'))*sqrt(NumCarr);% 竍? [64,22,i]?ｼ?Datatx縺ｧ豁｣隕丞喧縺ｮ轤ｺ縺ｫ縲《qrt(64)縺ｧ蜑ｲ縺｣縺溘?ｮ縺ｧ縲（fft驛ｨ縺ｧ縺ｯ縲《qrt(64)繧呈寺縺代※縺?繧具ｼ?
        end
         
        % 蜷?繝ｦ繝ｼ繧ｶ縺ｫ蜑ｲ繧雁ｽ薙※縺溘し繝悶く繝｣繝ｪ繧｢繝悶Ο繝?繧ｯ縺斐→縺ｫIFFT繧呈寺縺代ｋ蝣ｴ蜷?
%         proc_gain_block=NumCarr/proc_gain; % 4
%         for fscb=1:proc_gain_block% 1?ｽ?4
%             for i=1:Num_Tx % 1?ｽ?2
%                 BaseSignal((fscb-1)*proc_gain+1:fscb*proc_gain,:,i)=(ifft(Datatx(:,(fscb-1)*proc_gain+1:fscb*proc_gain,i)'))*sqrt(proc_gain);
%             end
%         end
     
        % 隍?邏?蜈ｱ蠖ｹ霆｢鄂ｮ繧貞叙縺｣縺溷ｾ後↓ifft繧偵＠縺ｦ縺?繧九??
        % ifft,fft縺ｯifft(x,[],1)縺ｧ蛻玲婿蜷代?ｮifft(fft)
        %           ifft(x,[],2)縺ｧ陦梧婿蜷代?ｮifft(fft)
        % 窶ｻ菴輔ｂ謖?螳壹＠縺ｪ縺?蝣ｴ蜷医?ｯ縲（fft(x,[],1)縺ｨ蜷後§謇ｱ縺?縺ｫ縺ｪ繧九??
        % [64,22,2]
        
        %% Add a Guard Period
		if guardtype~=0% 遲峨＠縺上↑縺?蝣ｴ蜷医?ｯ1繧定ｿ斐＠縲∫ｭ峨＠縺?蝣ｴ蜷医?ｯ0繧定ｿ斐☆縲?
            if guardtype == 1%guard period is just a zero transmission
              BaseSignal=[zeros(guardtime,Num_sym+Num_pilot,Num_Tx);BaseSignal];
            elseif guardtype == 2% 竍? 64繧ｵ繝悶く繝｣繝ｪ繧｢縺ｮ蠕梧婿謌仙?繧貞燕譁ｹ縺ｫ謖√▲縺ｦ縺上ｋ
      		  EndSignal = size(BaseSignal,1);% Find the number of columns in the BaseSignal 竍? 64
      		  BaseSignal=[BaseSignal((EndSignal-guardtime+1):EndSignal,:,:); BaseSignal];% [80,22,2] 竍? 繧ｬ繝ｼ繝峨う繝ｳ繧ｿ繝ｼ繝舌Ν繧偵▽縺代◆
            end	
        end        
        %%  Rayleigh fading channel竍偵ヵ繝ｩ繝?繝医ヵ繧ｧ繝ｼ繧ｸ繝ｳ繧ｰ?ｼ域凾髢薙↓縺ｯ萓晏ｭ倥＠縺ｪ縺?&蜻ｨ豕｢謨ｰ縺ｫ蟇ｾ縺励※荳?讒假ｼ?
        Multi = zeros(MultiNo,1);% [7,1]縺ｮ0
        for w=1:MultiNo% 1?ｽ?7
           Multi(w)=10^(0-(((w-1)*ww)/10));% 10^0?ｽ?10^(-6/10)竍壇B繧堤峩縺励◆
        end
        Norm=sum(Multi); NormMulti=Multi./(Norm);% Normalization竍呈ｭ｣隕丞喧縺励※縺?繧具ｼ?Multi縺ｮ蜷郁ｨ亥?､縺?1縺ｫ縺ｪ繧具ｼ?
        % 莉･荳九?√Θ繝ｼ繧ｶ謨ｰ蛻?縺?縺台ｽ懊ｋ
        OutSignal1=zeros(1,(Num_sym+Num_pilot)*(NumCarr+guardtime),Num_Rx,Num_User); % [1,22*80,2,4]
        OutSignal=zeros(1,(Num_sym+Num_pilot)*(NumCarr+guardtime),Num_Rx,Num_User); % [1,22*80,2,4]
        Signal_dis1=zeros(Num_Rx,Num_User); % [2,4]
        Signal_dis=zeros(Num_Rx,Num_User); % [2,4]
        Fading1=zeros(MultiNo,Num_sym+Num_pilot,Num_Rx,Num_User); % [7,22,2,4]
        Fading=zeros(MultiNo,Num_sym+Num_pilot,Num_Rx,Num_User); % [7,22,2,4]
        for u=1:Num_User % 1?ｽ?4 竍? 蜷?繝ｦ繝ｼ繧ｶ縺斐→縺ｫ逡ｰ縺ｪ繧倶ｼ晄成迺ｰ蠅?蜿翫?ｳ蜿嶺ｿ｡繧｢繝ｳ繝?繝翫ヮ繧､繧ｺ繧呈戟縺｣縺ｦ縺?繧九％縺ｨ縺ｫ襍ｷ蝗?縺吶ｋ
            for i=1:Num_Rx % 1?ｽ?2
                for j=1:Num_Tx % 1?ｽ?2 Signal_dis縺ｯ蠕後〒謾ｹ蝟?縺吶ｋ 竍? 縺溘□繝?繝ｼ繧ｿ繧剃ｿ晏ｭ倥＠縺ｦ繧九□縺代↑縺ｮ縺ｧ縲：ading縺ｫ逶ｴ謗･縺ｮ蠖ｱ髻ｿ縺ｯ縺ｪ縺?縲?
                    [OutSignal1(:,:,j,u),Signal_dis1(j,u), Fading1(:,:,j,u)]=channel_only_AM(BaseSignal(:,:,j),NormMulti,MultiNo,...
                    Transrate,Doppler,Delay,SNR,com_delay,channel_rand(j,i,u,:,:,k,r));% channel_only([80,22,2],[7,1],7,1000,4,2,7,0)
                    OutSignal(:,:,i,u)=OutSignal(:,:,i,u)+OutSignal1(:,:,j,u); % [1,1760,2,4]
                    Signal_dis(i,u)=Signal_dis(i,u)+Signal_dis1(j,u); % [2,4]
                    Fading(:,:,i,u)=Fading(:,:,i,u)+Fading1(:,:,j,u); % [7,22,2,4]
                end
            end    
        end
        % OutSignal=[1,80*22,2]?ｼ医?槭Ν繝√ヱ繧ｹ迺ｰ蠅?縺ｧ縺ｯ縲｀ultipathfading)
        % OutSignal[1,80*22,1]竍檀1*x1+h2'*x2
        % OutSignal[1,80*22,2]竍檀1'*x1+h2*x2
        % Signal_dis=騾∽ｿ｡菫｡蜿ｷ[80,22,2]縺ｮ讓呎ｺ門￥蟾ｮ
        % Fading=[7,22,2] 繝輔ぉ繝ｼ繧ｷ繝ｳ繧ｰ縲?竍? 蜷Пath縺ｮ繧ｷ繝ｳ繝懊Ν縺ｫ蟇ｾ縺励※縺ｮ繝輔ぉ繝ｼ繧ｸ繝ｳ繧ｰ
        %%  AWGN channel
        TimeSignal=zeros(1,(Num_sym+Num_pilot)*(NumCarr+guardtime),Num_Rx,Num_User); % [1,22*80,2,4]
        noise=zeros(1,(Num_sym+Num_pilot)*(NumCarr+guardtime),Num_Rx,Num_User); % [1,22*80,2,4]
        for u=1:Num_User
            for receive=1:Num_Rx
                [TimeSignal(:,:,receive,u),noise(1,:,receive,u)]=awgn(OutSignal(:,:,receive,u),Signal_dis(receive,u),MultiNo,Doppler,SNR,Num_sym,...
                    NumCarr,guardtime,Num_pilot,coding_rate,perfect,wordsize);% [[1,22*80,2,4],1,7,4,7,20,64,16,2,cording_rate,0,1]
            end
        end

        % TimeSignal[1,80*22,1]竍檀1*x1+h2'*x2+noise1
        % TimeSignal[1,80*22,2]竍檀1'*x1+h2*x2+noise2
        clear OutSignal;% save memory
        clear BaseSignal;% save memory
  
         %% Rx device 
        [Datarx,Datarx_hd]=receiver_non_FSS_MU_MIMO_AM_main(TimeSignal,ifftsize,carriers,wordsize,guardtype,...
                                    guardtime,Num_sym,Num_pilot,Doppler,proc_gain,Num_Tx,Num_Rx,Num_User,noise,channel_ranking,user_index);% [[1,22*80,2,4],64,[1,64],1,2,4,20,2,4,64,2,2,[1,22*80,2,4]]
        
        % Datarx_hd=蠕ｩ隱ｿ縺励◆繝?繝ｼ繧ｿ [20,64,2,2]
        % Datarx=螳滓焚驛ｨ縺ｮ逕溘ョ繝ｼ繧ｿ繧堤ｬｦ蜿ｷ蜿崎ｻ｢縺励◆繧ゅ?ｮ [20,64,2,2]
        if strength_len==0
           Summary=error_count(Gen_data,Datarx_hd,Num_Tx);
           Result(k,1) = SNR;                  
            %% Add up the number of errors
           Result(k,l+1) = Result(k,l+1)+Summary(1);	
        else
           Summary=error_count(Gen_data,Datarx_hd,Num_Tx); % Gen_data=[20,64,2,2],Datarx_hd=[20,64,2,2],Num_Tx=2
           Summary2=error_count2(Ori_data,Datarx,g,int_pattern,Num_Tx); % Ori_data=[1,20*64*2-6],Datarx=[20,64,2,2],g=[2,7],int_pattern=[1,20*64*2*2]竊進ndex
           Result(k,1) = SNR+10*log10(coding_rate);  % cording_rate=1/2
           Result1(k,1) = SNR;                  
            %% Add up the number of errors
           Result(k,l+1) = Result(k,l+1)+Summary(1);	
           Result1(k,l+1) = Result1(k,l+1)+Summary2(1);	
        end
     end
   end	
end

%% Display the result 
headerstr = [headerstr, BERstr, PhErrstr];
Result(:,2:NumSizes+1) = Result(:,2:NumSizes+1)/rep;%Average the std dev.
Result1(:,2:NumSizes+1) = Result1(:,2:NumSizes+1)/rep;%Average the std dev.
clear Datatx;clear Datarx;

%% Display the simulation Time and Processing Speed
savefile(filename,Result,headerstr);
if strength_len~=0
   savefile(filename1,Result1,headerstr);
end
disp(['Total Time: ' num2str(toc) 'sec']);
%disp(['Total FLOPS: ' num2str(flops)]);
%disp(['Process Speed : ' num2str(flops/toc) ' flops/sec']);
semilogy(SNRMin+10*log10(coding_rate):SNRInc:SNRMax+10*log10(coding_rate),Result(:,2)','r>-',...
         SNRMin:SNRInc:SNRMax,Result1(:,2)','b<-');
legend('FSS-MIMO(MMSE_MLD)','FSS-MIMO(FEC)');
xlabel('Eb/No [dB]');
ylabel('BER');
axis([0,30,10^(-5),10^(0)]);
grid;
hold on;